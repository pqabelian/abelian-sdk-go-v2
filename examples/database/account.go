package database

import (
	"encoding/hex"
	"errors"
	"github.com/pqabelian/abelian-sdk-go-v2/abelian"
	"github.com/pqabelian/abelian-sdk-go-v2/examples/common"
)

func initBuiltInAccount() {
	println("insert build-in accounts")
	var err error
	// built-in account
	_, err = InsertAccount(
		abelian.TestNet,
		abelian.AccountPrivacyLevelFullPrivacy,
		[]byte{0xd2, 0x25, 0x3b, 0x7a, 0x7e, 0x21, 0x26, 0xa1, 0xc, 0x9c, 0x42, 0x6f, 0x4b, 0x3, 0x3f, 0xca, 0xda, 0xba, 0x53, 0xf, 0x75, 0xb2, 0xc0, 0xa6, 0x68, 0x57, 0xdb, 0x96, 0xdf, 0xf7, 0x9f, 0xa7, 0x21, 0x91, 0x6d, 0xd8, 0xee, 0x48, 0x25, 0x96, 0x6f, 0x7b, 0x81, 0x96, 0x1a, 0xe7, 0xfc, 0xa5, 0x9c, 0x5e, 0xb0, 0x7e, 0xbb, 0x5e, 0xa5, 0x33, 0xb4, 0x9, 0xbe, 0xe5, 0xd1, 0x77, 0x80, 0xc3},
		[]byte{0xc3, 0x5c, 0x60, 0xa, 0x77, 0xe0, 0x67, 0xf6, 0x5c, 0xc4, 0x45, 0x16, 0x8e, 0x1c, 0x46, 0xcf, 0x76, 0x97, 0x8b, 0x11, 0xd3, 0xf4, 0x65, 0xe9, 0xcc, 0x1f, 0x44, 0x83, 0x99, 0x3b, 0x85, 0x5e, 0x40, 0xcc, 0x4b, 0xe, 0xaa, 0x62, 0xfb, 0x26, 0xe8, 0x99, 0xb2, 0xe2, 0xdd, 0xfa, 0xde, 0x77, 0xbf, 0xe2, 0xb8, 0x17, 0x19, 0x13, 0x6e, 0x8a, 0x1b, 0xae, 0x2f, 0x85, 0xe1, 0x0, 0xe6, 0x2c},
		[]byte{0x6b, 0x3f, 0xdc, 0x47, 0x3d, 0x3, 0xb4, 0xc0, 0xa9, 0x6, 0xb1, 0x10, 0x6e, 0x52, 0x8c, 0xd9, 0x94, 0xbd, 0x49, 0x38, 0x7b, 0xce, 0xd4, 0xa3, 0xe6, 0xf1, 0x5d, 0xfc, 0x9a, 0x9e, 0xa9, 0x95, 0xb0, 0x6f, 0x89, 0x10, 0xbb, 0x1a, 0x6d, 0x15, 0x4f, 0x40, 0xc1, 0x52, 0x9a, 0xa5, 0xda, 0x29, 0x9, 0xd1, 0x2f, 0xfe, 0x78, 0xd9, 0xf3, 0x64, 0x45, 0x90, 0x3, 0xc0, 0xb3, 0x8f, 0xd4, 0xe5},
		[]byte{0x33, 0x18, 0xe1, 0x76, 0x5b, 0xab, 0x28, 0x9b, 0x22, 0x6f, 0x19, 0x3b, 0x98, 0x4a, 0x99, 0x5d, 0x66, 0xf1, 0xd9, 0x4, 0x1f, 0x41, 0x5d, 0xb1, 0x7d, 0xbd, 0xb6, 0x77, 0x94, 0x16, 0x2b, 0x41, 0xce, 0x2f, 0x55, 0x1c, 0xff, 0x12, 0xe0, 0x6a, 0x4b, 0xe2, 0x4d, 0x4b, 0x2d, 0xaf, 0x5d, 0x3a, 0x0, 0xb7, 0xbb, 0x5a, 0x22, 0xb9, 0xca, 0x60, 0xcc, 0x34, 0x4, 0x41, 0xf5, 0xbd, 0x6a, 0xde},
	)

	_, err = InsertAccount(
		abelian.TestNet,
		abelian.AccountPrivacyLevelPseudonym,
		[]byte{0x99, 0xde, 0xc, 0xc6, 0x2d, 0x1d, 0xa9, 0x10, 0x2a, 0x9d, 0x8e, 0xae, 0x2c, 0xea, 0x16, 0xa0, 0x51, 0x1b, 0x9b, 0xa5, 0xe4, 0x84, 0x2d, 0x25, 0x14, 0x6b, 0xe0, 0xc3, 0x12, 0x9b, 0x25, 0xe4, 0x9e, 0x2d, 0x88, 0x8b, 0xe5, 0x1a, 0xf0, 0x6, 0x34, 0xe2, 0xf3, 0x8b, 0xc4, 0x6c, 0xa0, 0x97, 0x36, 0x70, 0x95, 0x7f, 0xe8, 0x16, 0xe7, 0x6f, 0x41, 0xd2, 0x4e, 0x67, 0xc2, 0x15, 0x2b, 0x8f},
		[]byte{},
		[]byte{},
		[]byte{0xf7, 0xa8, 0x23, 0xd7, 0xfb, 0x8b, 0xe6, 0x45, 0x1e, 0x7, 0xd, 0xe6, 0xa3, 0x1e, 0x75, 0xb9, 0x10, 0xcc, 0xca, 0x0, 0x87, 0x27, 0x9c, 0x75, 0x38, 0xc2, 0xe6, 0x4c, 0xd2, 0xc5, 0x80, 0x71, 0xca, 0x2b, 0xa6, 0x44, 0x11, 0x19, 0xe5, 0xcf, 0xba, 0x54, 0x74, 0x98, 0x6, 0xc5, 0x81, 0xfa, 0x83, 0x7a, 0x24, 0x50, 0x3d, 0xec, 0x2e, 0xad, 0xb6, 0x6b, 0xe0, 0x33, 0x42, 0xb0, 0x24, 0x4a},
	)
	if err != nil {
		panic(err)
	}

	_, err = InsertAccount(
		abelian.TestNet,
		abelian.AccountPrivacyLevelFullPrivacy,
		[]byte{0x8, 0x6c, 0x9c, 0xda, 0xf9, 0xee, 0xc5, 0xdb, 0xca, 0x41, 0x29, 0x83, 0x46, 0x11, 0xa2, 0xbc, 0xa7, 0x27, 0xc9, 0x55, 0x32, 0x4e, 0x41, 0x3e, 0xc9, 0x69, 0x21, 0x56, 0xf9, 0x5f, 0x2, 0x10, 0x13, 0x54, 0xa, 0x12, 0xcf, 0x7c, 0x85, 0x59, 0xd5, 0xd4, 0xf8, 0x65, 0xf3, 0x54, 0x68, 0xa, 0x2e, 0x22, 0x2b, 0xb5, 0xbc, 0x22, 0x28, 0xd9, 0xf9, 0x51, 0xac, 0xaf, 0xef, 0xc6, 0x29, 0x5},
		[]byte{0x74, 0x39, 0xed, 0x31, 0x60, 0x33, 0xb0, 0x12, 0x83, 0x7b, 0x5c, 0x66, 0x84, 0x1e, 0x2b, 0x4, 0x88, 0x87, 0xee, 0xdd, 0x3f, 0xe8, 0x6e, 0xe6, 0x9e, 0xfb, 0x19, 0xd9, 0xf5, 0xa0, 0xb, 0x19, 0x1c, 0xee, 0x31, 0x30, 0x98, 0xc3, 0xa7, 0x9d, 0xb3, 0x92, 0x13, 0x4a, 0xc, 0x29, 0x24, 0xf5, 0x90, 0xbb, 0xd4, 0x97, 0x7e, 0x54, 0x6d, 0xd, 0x28, 0xec, 0x85, 0x45, 0xbb, 0xc, 0x0, 0x5e},
		[]byte{0x18, 0xeb, 0xcc, 0x7c, 0x78, 0x90, 0x51, 0xfd, 0x36, 0x39, 0x69, 0x3f, 0x88, 0x23, 0x54, 0xdb, 0xc6, 0x1a, 0x98, 0x63, 0xe7, 0xad, 0x44, 0x27, 0xf3, 0x23, 0xc6, 0x82, 0x1b, 0x72, 0x4, 0x88, 0x95, 0xff, 0x2e, 0x71, 0xef, 0x1a, 0xb, 0x8, 0x35, 0x97, 0xe1, 0x6d, 0x13, 0x92, 0x1a, 0x7a, 0x1b, 0x68, 0x71, 0x65, 0x88, 0x42, 0xad, 0x87, 0xfd, 0x26, 0x6b, 0x12, 0xe3, 0xe0, 0xe8, 0x11},
		[]byte{0x2a, 0x4d, 0x1, 0x55, 0x15, 0x23, 0xb3, 0x34, 0x36, 0x46, 0x84, 0x29, 0x30, 0x85, 0x7e, 0x15, 0xfd, 0x54, 0xd, 0xa8, 0x99, 0x6f, 0xde, 0xb, 0x35, 0x1b, 0x7b, 0x62, 0xa9, 0x27, 0xdb, 0x7e, 0xb7, 0x23, 0xfa, 0xbd, 0x53, 0xb3, 0x78, 0x16, 0xb0, 0x61, 0x34, 0x4f, 0xd7, 0x6c, 0xd4, 0x67, 0xa3, 0xf7, 0xc6, 0xff, 0x68, 0x4b, 0xaa, 0xa1, 0xfb, 0x74, 0x61, 0xaf, 0xac, 0x8e, 0xd, 0x91},
	)

	_, err = InsertAccount(
		abelian.TestNet,
		abelian.AccountPrivacyLevelPseudonym,
		[]byte{0xc0, 0x2c, 0xb7, 0x7a, 0xc2, 0x8d, 0xbb, 0x6, 0xff, 0x63, 0xb, 0x8a, 0xdb, 0xea, 0x9c, 0x21, 0xf9, 0x96, 0x5f, 0xb0, 0xf, 0xe0, 0xc9, 0x9e, 0x7d, 0x8f, 0x83, 0xb1, 0x40, 0x8a, 0x1f, 0x51, 0x47, 0xae, 0xd4, 0xd2, 0xe6, 0x95, 0x69, 0xc9, 0xc1, 0xe8, 0x20, 0x6f, 0xf4, 0x84, 0x97, 0xce, 0xf4, 0xeb, 0x97, 0xe9, 0xbb, 0x49, 0xa2, 0x55, 0xf, 0xdd, 0xb7, 0x5b, 0x10, 0xfc, 0xc0, 0x72},
		[]byte{},
		[]byte{},
		[]byte{0x42, 0x85, 0xbe, 0x93, 0x70, 0x51, 0x59, 0x1c, 0x5e, 0xc3, 0xa5, 0xbb, 0x4b, 0x3e, 0x25, 0xce, 0xdb, 0x6a, 0xc9, 0xb7, 0xa2, 0x5f, 0x52, 0x6d, 0x53, 0xbe, 0xc7, 0x48, 0xaf, 0xb7, 0x3a, 0x4f, 0x95, 0x94, 0x9, 0x10, 0xca, 0x21, 0x76, 0x3a, 0xd8, 0x12, 0x54, 0x9a, 0xd5, 0xc2, 0x2b, 0xb2, 0x6d, 0x12, 0xa4, 0x8d, 0x13, 0x2c, 0xb1, 0xac, 0x76, 0x38, 0x99, 0x51, 0xa8, 0x21, 0x70, 0x5c},
	)
	if err != nil {
		panic(err)
	}

}

type Account struct {
	ID int64
	abelian.Account
}

func InsertAccount(
	networkID abelian.NetworkID,
	privacyLevel abelian.AccountPrivacyLevel,
	coinSpendKeySeed []byte,
	coinSerialNumberKeySeed []byte,
	coinValueKeySeed []byte,
	coinDetectorKey []byte) (int64, error) {
	stmt, err := db.Prepare("INSERT INTO account (network_id,account_privacy_level,spend_key_seed,sn_key_seed,value_key_seed,detector_key) VALUES (?,?,?,?,?,?)")
	if err != nil {
		return -1, err
	}
	result, err := stmt.Exec(
		networkID,
		privacyLevel,
		hex.EncodeToString(coinSpendKeySeed),
		hex.EncodeToString(coinSerialNumberKeySeed),
		hex.EncodeToString(coinValueKeySeed),
		hex.EncodeToString(coinDetectorKey))
	if err != nil {
		return -1, err
	}
	return result.LastInsertId()
}

type ViewAccount struct {
	ID int64
	abelian.ViewAccount
}

func LoadViewAccount(id int64) (*ViewAccount, error) {
	rows, err := db.Query("SELECT ID,network_id,account_privacy_level,sn_key_seed,value_key_seed,detector_key FROM account WHERE id = ?", id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var id int64
		var networkID abelian.NetworkID
		var accountPrivacyLevel abelian.AccountPrivacyLevel
		var coinSerialNumberKeySeedStr string
		var coinValueKeySeedStr string
		var coinDetectorKeyStr string

		err = rows.Scan(&id,
			&networkID,
			&accountPrivacyLevel,
			&coinSerialNumberKeySeedStr,
			&coinValueKeySeedStr,
			&coinDetectorKeyStr)
		if err != nil {
			return nil, err
		}
		coinSerialNumberKeySeed, _ := hex.DecodeString(coinSerialNumberKeySeedStr)
		coinValueKeySeed, _ := hex.DecodeString(coinValueKeySeedStr)
		coinDetectorKey, _ := hex.DecodeString(coinDetectorKeyStr)
		tmpAccount := abelian.NewRootSeedViewAccount(
			networkID,
			accountPrivacyLevel,
			coinSerialNumberKeySeed,
			coinValueKeySeed,
			coinDetectorKey)
		return &ViewAccount{
			ID:          id,
			ViewAccount: tmpAccount,
		}, nil
	}
	return nil, errors.New("unreachable code")
}
func LoadViewAccounts() ([]*ViewAccount, error) {
	rows, err := db.Query("SELECT ID,network_id,account_privacy_level,sn_key_seed,value_key_seed,detector_key FROM account WHERE network_id = ?", common.GetNetworkID())
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	accounts := []*ViewAccount{}
	for rows.Next() {
		var id int64
		var networkID abelian.NetworkID
		var accountPrivacyLevel abelian.AccountPrivacyLevel
		var coinSerialNumberKeySeedStr string
		var coinValueKeySeedStr string
		var coinDetectorKeyStr string

		err = rows.Scan(&id,
			&networkID,
			&accountPrivacyLevel,
			&coinSerialNumberKeySeedStr,
			&coinValueKeySeedStr,
			&coinDetectorKeyStr)
		if err != nil {
			return nil, err
		}
		coinSerialNumberKeySeed, _ := hex.DecodeString(coinSerialNumberKeySeedStr)
		coinValueKeySeed, _ := hex.DecodeString(coinValueKeySeedStr)
		coinDetectorKey, _ := hex.DecodeString(coinDetectorKeyStr)
		tmpAccount := abelian.NewRootSeedViewAccount(
			networkID,
			accountPrivacyLevel,
			coinSerialNumberKeySeed,
			coinValueKeySeed,
			coinDetectorKey)

		accounts = append(accounts, &ViewAccount{
			ID:          id,
			ViewAccount: tmpAccount,
		})
	}
	return accounts, nil
}

func LoadAccountByID(id int64) (account *Account, err error) {
	rows, err := db.Query("SELECT ID,network_id,account_privacy_level,spend_key_seed,sn_key_seed,value_key_seed,detector_key FROM account WHERE ID = ?", id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var id int64
		var networkID abelian.NetworkID
		var accountPrivacyLevel abelian.AccountPrivacyLevel
		var coinSpendKeySeedStr string
		var coinSerialNumberKeySeedStr string
		var coinValueKeySeedStr string
		var coinDetectorKeyStr string

		err = rows.Scan(&id,
			&networkID,
			&accountPrivacyLevel,
			&coinSpendKeySeedStr,
			&coinSerialNumberKeySeedStr,
			&coinValueKeySeedStr,
			&coinDetectorKeyStr)
		if err != nil {
			return nil, err
		}

		coinSpendKeySeed, _ := hex.DecodeString(coinSpendKeySeedStr)
		coinSerialNumberKeySeed, _ := hex.DecodeString(coinSerialNumberKeySeedStr)
		coinValueKeySeed, _ := hex.DecodeString(coinValueKeySeedStr)
		coinDetectorKey, _ := hex.DecodeString(coinDetectorKeyStr)
		account = &Account{
			ID: id,
			Account: abelian.NewRootSeedAccount(
				networkID,
				accountPrivacyLevel,
				coinSpendKeySeed,
				coinSerialNumberKeySeed,
				coinValueKeySeed,
				coinDetectorKey),
		}

	}
	return account, nil
}
